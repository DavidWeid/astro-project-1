---
import { Debug } from 'astro:components';

import { Image } from 'astro:assets';
import Base from '@layouts/Base.astro';
import HeroBackground from '@components/HeroSpace.astro';
import catIcon from '@images/games/cat-500.png';
import drinkIcon from '@images/games/drink-500.png';
import cupcakeIcon from '@images/games/cupcake-500.png';

const pageTitle = 'Gaming Center';
const heroTitle =
  "<span class='text-gradient block pb-10'>Gaming Center</span>";
const heroDescription = '';

const steamApiKey = import.meta.env.STEAM_API_KEY;
const steamUserId = import.meta.env.PUBLIC_STEAM_USER_ID;

const games = [
  {
    title: 'Helldivers 2',
    id: 553850,
  },
  {
    title: 'Chivalry 2',
    id: 1824220,
  },
  {
    title: 'Timberborn',
    id: 1062090,
  },
  {
    title: 'Farthest Frontier',
    id: 1044720,
  },
  {
    title: 'The Planet Crafter',
    id: 1284190,
  },
];

let dataGameNews: any = {};
let dataPlayerData: any = {};
let dataOwnedGames: any = {};
let dataRecentlyPlayedGames: any = {};

const responseGameNews = await fetch(
  `https://api.steampowered.com/ISteamNews/GetNewsForApp/v0002/?appid=553850&count=3&maxlength=500&format=json`,
);
try {
  dataGameNews = await responseGameNews.json();
} catch (error) {
  console.log('Error fetching game news data', error);
}

if (steamApiKey && steamUserId) {
  const responsePlayerData = await fetch(
    `http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=${steamApiKey}&steamids=${steamUserId}`,
  );
  try {
    dataPlayerData = await responsePlayerData.json();
  } catch (error) {
    console.error('Error fetching player data', error);
  }

  const responseOwnedGames = await fetch(
    `http://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v0001/?key=${steamApiKey}&steamid=${steamUserId}&format=json`,
  );
  try {
    dataOwnedGames = await responseOwnedGames.json();
  } catch (error) {
    console.error('Error fetching owned games', error);
  }

  const responseRecentlyPlayedGames = await fetch(
    `http://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v0001/?key=${steamApiKey}&steamid=${steamUserId}&format=json`,
  );
  try {
    dataRecentlyPlayedGames = await responseRecentlyPlayedGames.json();
  } catch (error) {
    console.error('Error fetching recently played games', error);
  }
}

const playerOneData = dataPlayerData?.response.players[0];
const playerState = playerOneData?.personastate;
const currentlyPlaying = playerOneData?.gameextrainfo;
const mostRecentPlayedGame = dataRecentlyPlayedGames?.response.games[0].name;

let playerStateText = '';
let playerStateClasses = '';

switch (playerState) {
  case 0:
    playerStateText = 'Offline';
    playerStateClasses = 'bg-gray-500';
    break;
  case 1:
    playerStateText = 'Online';
    playerStateClasses = 'bg-green-emerald';
    break;
  case 2:
    playerStateText = 'Busy';
    playerStateClasses = 'bg-red-500';
    break;
  case 3:
    playerStateText = 'Away';
    playerStateClasses = 'bg-yellow-500';
    break;
  case 4:
    playerStateText = 'Snooze';
    playerStateClasses = 'bg-blue-500';
    break;
  case 5:
    playerStateText = 'Looking to trade';
    playerStateClasses = 'bg-purple-500';
    break;
  case 6:
    playerStateText = 'Looking to play';
    playerStateClasses = 'bg-green-500';
    break;
  default:
    break;
}
---

<Base title={pageTitle} indexForSearch={false} includeSearchComponent={false}>
  <HeroBackground title={heroTitle} description={heroDescription} />

  <span class="block pb-8"></span>

  <section class="container relative">
    <div
      id="player-card-holder"
      class="card-collapsed relative -top-[120px] bottom-0 left-0 right-0 m-auto w-full"
    >
      <div
        id="player-card"
        class="text-white bg-blue-dark dark:bg-medium py-6 px-12 rounded-lg flex flex-col items-center transition-shadow duration-500 shadow-shallow shadow-dark/10 dark:shadow-light/10 hover:shadow-dark dark:hover:shadow-green-dark"
      >
        <h2>
          <a
            href={playerOneData?.profileurl}
            target="_blank"
            class="relative flex items-center w-max hover:text-green-emerald"
          >
            {playerOneData?.personaname}
            <span class="sr-only">View Steam profile (Opens in a new tab)</span>
            <svg
              class="absolute -right-8"
              width="24px"
              height="24px"
              viewBox="0 0 24 24"
              aria-hidden="true"
              focusable="false"
              fill="none"
            >
              <g
                stroke-width="2.1"
                stroke="#666"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <>
                  <polyline points="17 13.5 17 19.5 5 19.5 5 7.5 11 7.5"
                  ></polyline>
                  <path d="M14,4.5 L20,4.5 L20,10.5 M20,4.5 L11,13.5"></path>
                </>
              </g>
            </svg>
          </a>
        </h2>

        <p
          class="flex gap-2 items-center uppercase text-xs tracking-wide font-mono"
        >
          Status <span class="sr-only">{playerStateText}</span>
          <span
            title={playerStateText}
            class={`block w-3 h-3 rounded-full shadow-2xl shadow-black ${playerStateClasses}`}
          ></span>
        </p>

        <span class="block pb-4"></span>

        <Image
          loading="eager"
          src={playerOneData?.avatarfull}
          alt="Steam profile avatar"
          width={144}
          height={144}
          class="vibrate w-36 h-w-36 rounded-full"
        />

        {
          currentlyPlaying && (
            <>
              <span class="block pb-4" />
              <p class="uppercase text-sm text-center">
                In game
                <span class="block mt-1.5 py-1 px-2 bg-green-dark rounded text-xs tracking-wide font-mono shadow-2xl shadow-black">
                  {currentlyPlaying}
                </span>
              </p>
            </>
          )
        }
        {
          !currentlyPlaying && mostRecentPlayedGame && (
            <>
              <span class="block pb-4" />
              <p class="uppercase text-sm text-center">
                Most Recently Seen
                <span class="block mt-1.5 py-1 px-2 bg-light/25 rounded text-xs tracking-wide font-mono shadow-2xl shadow-black">
                  {mostRecentPlayedGame}
                </span>
              </p>
            </>
          )
        }

        <div class="w-full group">
          <hr
            class="mt-4 border-green-emerald transition-transform duration-500 group-hover:scale-105"
          />

          <button
            id="view-full-profile"
            class="flex items-center justify-center gap-2 py-4 w-full text-sm font-mono uppercase hover:font-bold"
          >
            <span
              class="group-hover:translate-y-1.5 transition-transform duration-500"
            >
              <span id="button-text">VIEW FULL PROFILE</span>
              <span id="button-icon" aria-hidden="true"> &darr; </span>
            </span>
          </button>
        </div>

        <!-- Profile Details -->
        <section id="profile-details" class="collapsed">
          <nav id="profile-nav" class="w-full overflow-x-scroll">
            <ul class="flex justify-center gap-6 w-max mx-auto">
              <li class="whitespace-nowrap">
                <button
                  id="button--about"
                  class="px-4 py-2 border-b border-b-light hover:text-green-emerald transition-all duration-500 uppercase active"
                >
                  ABOUT
                </button>
              </li>
              <li class="whitespace-nowrap">
                <button
                  id="button--stats"
                  class="px-4 py-2 border-b border-b-light hover:text-green-emerald transition-all duration-500 uppercase"
                  >STATS</button
                >
              </li>
              <li class="whitespace-nowrap">
                <button
                  id="button--friends"
                  class="px-4 py-2 border-b border-b-light hover:text-green-emerald transition-all duration-500 uppercase"
                  >FRIENDS</button
                >
              </li>
              <li class="whitespace-nowrap">
                <button
                  id="button--recent-games"
                  class="px-4 py-2 border-b border-b-light hover:text-green-emerald transition-all duration-500 uppercase"
                  >RECENT GAMES</button
                >
              </li>
              <li class="whitespace-nowrap">
                <button
                  id="button--owned-games"
                  class="px-4 py-2 border-b border-b-light hover:text-green-emerald transition-all duration-500 uppercase"
                  >OWNED GAMES</button
                >
              </li>
            </ul>
          </nav>

          <div id="profile-panel" class="py-6">
            <div id="panel--about" class="panel">
              <div class="grid grid-cols-3 gap-6"></div>
            </div>
            <div id="panel--stats" class="panel hidden">STATS</div>
            <div id="panel--friends" class="panel hidden">FRIENDS</div>
            <div id="panel--recent-games" class="panel hidden">
              RECENT GAMES
            </div>
            <div id="panel--owned-games" class="panel hidden">OWNED GAMES</div>
          </div>

          <!-- <Debug {dataGameNews} /> -->
          <!-- <Debug {playerOneData} /> -->
          <!-- <Debug {dataOwnedGames} /> -->
          <!-- <Debug {dataRecentlyPlayedGames} /> -->

          <span class="block pb-16"></span>
        </section>
      </div>
    </div>
  </section>
</Base>

<style>
  #player-card-holder {
    @apply transition-[max-width] duration-500;
  }
  .card-expanded {
    max-width: 100%;
  }

  .card-collapsed {
    max-width: 350px;
  }

  button.active {
    @apply border-b-green-emerald;
  }

  #profile-details {
    @apply transition-opacity duration-500;
  }

  #profile-details.collapsed {
    @apply opacity-0 w-0 h-0;
  }

  #profile-details.collapsed * {
    @apply hidden;
  }

  #profile-details.expanded {
    @apply opacity-100 w-full laptop:w-max h-full;
  }

  .panel {
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const playerCardHolder = document.getElementById('player-card-holder');
    const viewFullProfileButton = document.getElementById('view-full-profile');
    const viewProfileButtonText =
      viewFullProfileButton?.querySelector('#button-text');
    const viewProfileButtonIcon =
      viewFullProfileButton?.querySelector('#button-icon');
    const profileDetails = document.getElementById('profile-details');
    const profileNavButtons = document.querySelectorAll('#profile-nav button');
    const profilePanels = document.querySelectorAll(
      '#profile-panel div[id^="panel--"]',
    );

    viewFullProfileButton?.addEventListener('click', () => {
      if (playerCardHolder?.classList.contains('card-collapsed')) {
        playerCardHolder?.classList.replace('card-collapsed', 'card-expanded');
        if (viewProfileButtonText)
          viewProfileButtonText.textContent = 'HIDE PROFILE DETAILS';
        if (viewProfileButtonIcon) viewProfileButtonIcon.innerHTML = '&uarr;';
        profileDetails?.classList.replace('collapsed', 'expanded');
      } else {
        playerCardHolder?.classList.replace('card-expanded', 'card-collapsed');
        if (viewProfileButtonText)
          viewProfileButtonText.textContent = 'VIEW FULL PROFILE';
        if (viewProfileButtonIcon) viewProfileButtonIcon.innerHTML = '&darr;';
        profileDetails?.classList.replace('expanded', 'collapsed');
      }
    });

    profileNavButtons.forEach((button) => {
      button.addEventListener('click', () => {
        profileNavButtons.forEach((button) =>
          button.classList.remove('active'),
        );
        button.classList.add('active');

        profilePanels.forEach((panel) => panel.classList.add('hidden'));
        const panelId = button.id.replace('button--', 'panel--');
        const panelToShow = document.getElementById(panelId);
        if (panelToShow) panelToShow.classList.remove('hidden');
      });
    });
  });
</script>
