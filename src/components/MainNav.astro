---
import { Image } from 'astro:assets';
import davidsPlaceLogo from '@images/astro/astro-6.svg';

interface NavigationLinks {
  [key: string]: string;
}

const baseURL = import.meta.env.BASE_URL;

const obj: NavigationLinks = {
  home: `${baseURL}`,
  cookbook: `${baseURL}cookbook/`,
  gaming: `${baseURL}games/`,
};

const pathname: string = `${new URL(Astro.request.url).pathname}`;

// If on homepage, don't include the 'href' attribute on the link element
const homepageLinkAttributes = pathname === baseURL ? {} : { href: baseURL };

const nonLinkClasses =
  'text-white/60 hover:text-white/60 dark:text-white/60 dark:hover:text-white/60 w-max px-3 py-2 uppercase text-sm';
const linkClasses =
  'text-white hover:text-green-emerald hover:scale-110 transition-all w-max px-3 py-2 uppercase text-sm';

const navItems: string[] = Object.keys(obj).map(
  (key) =>
    `<li class='flex items-center'>
      ${pathname === obj[key] ? `<span class="${nonLinkClasses}">${key}</span>` : `<a role="link" href="${obj[key]}" class="${linkClasses}">${key}</a>`}
  </li>`,
);
---

<nav
  class="z-30 py-4 bg-dark text-white bg-gradient-to-tr from-blue-dark/60 to-blue-darfrom-blue-dark/10 hover:from-blue-dark/80 transition-all laptop:sticky laptop:top-0"
>
  <div class="container flex justify-between items-center">
    <div class="flex items-center group">
      <Image
        loading="eager"
        src={davidsPlaceLogo}
        alt="David's Place Logo"
        title="David's Place Logo - An astronaut"
        class={pathname === baseURL
          ? 'h-14 w-auto'
          : 'h-14 w-auto group-hover:-rotate-12 transition-all'}
      />
      {
        pathname === baseURL ? (
          <span class="px-4 py-2">David's Place</span>
        ) : (
          <a
            role="link"
            {...homepageLinkAttributes}
            class="px-4 py-2 group-hover:text-green-emerald group-hover:scale-110 transition-all"
            aria-label="David's Place Homepage"
          >
            David's Place
          </a>
        )
      }
    </div>
    <div class="flex items-center gap-4">
      <!-- Nav items visible on tablet+ -->
      <ul class="hidden tablet:flex items-center gap-3" set:html={navItems} />
      <fieldset class="flex flex-col gap-1 items-center">
        <legend class="sr-only">Select Dark Mode:</legend>
        <input
          type="checkbox"
          id="darkModeSwitch"
          checked="true"
          class="transition-all before:transition-all duration-500 before:duration-700 relative appearance-none w-12 h-6 rounded-full bg-white/75 hover:cursor-pointer hover:brightness-125 before:content-[''] before:w-4 before:h-4 before:rounded-full before:bg-blue-dark before:absolute before:top-1/2 before:left-1 before:-translate-y-1/2 checked:bg-blue-dark checked:before:bg-accent-light checked:before:left-7"
        />
        <label
          for="darkModeSwitch"
          class="text-center text-xs opacity-75 hover:cursor-pointer w-[70px]"
          >Dark Mode</label
        >
      </fieldset>
    </div>
  </div>

  <!-- Nav items visible on mobile only -->
  <div class="container tablet:hidden">
    <span class="block my-4 border-t border-t-green-emerald"></span>
    <ul
      class="flex flex-wrap justify-center items-center gap-x-4 gap-y-2"
      set:html={navItems}
    />
  </div>
</nav>

<script is:inline>
  const setDarkModeSwitchState = (boolean) => {
    const darkModeSwitch = document.getElementById('darkModeSwitch');
    const darkModeLabel = document.querySelector('label[for="darkModeSwitch"]');
    if (darkModeSwitch && darkModeLabel) {
      darkModeSwitch.checked = boolean;
      darkModeSwitch.setAttribute('aria-checked', boolean);
      darkModeLabel.textContent = boolean ? 'Dark Mode' : 'Light Mode';
    }
  };

  const isDarkMode = () => {
    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      return true;
    } else {
      return false;
    }
  };

  const initDarkMode = () => {
    if (isDarkMode()) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }

    setDarkModeSwitchState(isDarkMode());
  };

  initDarkMode();

  document.addEventListener('astro:after-swap', () => {
    initDarkMode();
  });

  document.addEventListener('astro:page-load', () => {
    const toggleDarkMode = () => {
      const initialDarkModeState = isDarkMode();

      if (initialDarkModeState === true) {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
      } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
      }

      setDarkModeSwitchState(!initialDarkModeState);
    };

    const addChangeListenerToSwitch = () => {
      const darkModeSwitch = document.getElementById('darkModeSwitch');

      darkModeSwitch?.addEventListener('change', () => {
        toggleDarkMode();
      });
    };

    initDarkMode();
    addChangeListenerToSwitch();
  });
</script>
