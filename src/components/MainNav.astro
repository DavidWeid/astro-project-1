---
import { Image } from 'astro:assets';
import astroLogoSpread from '@images/astro/astro-9.svg';
import astroLogoBook from '@images/astro/astro-6.svg';
import astroLogoGame from '@images/astro/astro-10.svg';

interface NavigationLinks {
  [key: string]: string;
}

const baseURL = import.meta.env.BASE_URL;
const pathname = Astro.url.pathname;

const obj: NavigationLinks = {
  home: `${baseURL}`,
  cookbook: `${baseURL}cookbook/`,
  gaming: `${baseURL}games/`,
  blog: `${baseURL}blog/`
};

let astroLogo = astroLogoSpread;

if (pathname.includes('cookbook')) {
  astroLogo = astroLogoBook;
} else if (pathname.includes('games')) {
  astroLogo = astroLogoGame;
}

// If on homepage, don't include the 'href' attribute on the link element
const homepageLinkAttributes = pathname === baseURL ? {} : { href: baseURL };

const nonLinkClasses =
  'text-light/60 hover:text-light/60 dark:text-light/60 dark:hover:text-light/60 w-max px-3 py-2 uppercase text-sm';
const linkClasses =
  'text-light hover:text-green-emerald hover:scale-110 transition-all w-max px-3 py-2 uppercase text-sm';

const navItems: string[] = Object.keys(obj).map(
  (key) =>
    `<li class='flex items-center'>
      ${pathname === obj[key] ? `<span class="${nonLinkClasses}">${key}</span>` : `<a role="link" href="${obj[key]}" class="${linkClasses}">${key}</a>`}
  </li>`
);
---

<nav
  class='z-30 py-4 bg-dark text-light bg-gradient-to-tr from-blue-dark/60 to-blue-darfrom-blue-dark/10 hover:from-blue-dark/80 transition-all laptop:sticky laptop:top-0'
>
  <div class='container flex flex-wrap justify-between items-center'>
    <div class='flex items-center group'>
      <Image
        loading='eager'
        src={astroLogo}
        alt="David's Place Logo - An astronaut"
        title="David's Place Logo - An astronaut"
        class={pathname === baseURL
          ? 'h-12 w-auto'
          : 'h-12 w-auto group-hover:-rotate-12 transition-all'}
      />
      {
        pathname === baseURL ? (
          <span class='px-4 py-2'>David's Place</span>
        ) : (
          <a
            role='link'
            {...homepageLinkAttributes}
            class='px-4 py-2 group-hover:text-green-emerald group-hover:scale-110 transition-all'
            aria-label="David's Place Homepage"
          >
            David's Place
          </a>
        )
      }
    </div>

    <div class='flex items-center gap-4'>
      <!-- Nav items visible on tablet+ -->
      <ul class='hidden tablet:flex items-center gap-3' set:html={navItems} />

      <fieldset class='flex flex-col gap-1 items-center'>
        <legend class='sr-only'>Select Dark Mode:</legend>
        <input
          type='checkbox'
          id='darkModeSwitch'
          checked='true'
          class="transition-all before:transition-all duration-500 before:duration-500 relative appearance-none w-12 h-6 rounded-full bg-light/75 hover:cursor-pointer hover:brightness-125 before:content-[''] before:w-4 before:h-4 before:rounded-full before:bg-blue-dark before:absolute before:top-1/2 before:left-1 before:-translate-y-1/2 checked:bg-blue-dark checked:before:bg-accent-light checked:before:left-7"
        />
        <label
          for='darkModeSwitch'
          class='text-center text-xs opacity-75 hover:cursor-pointer w-[70px]'
          >Dark Mode</label
        >
      </fieldset>

      <div>
        <button id='font-decrease' class='' aria-label='Decrease Font Size'
          >A-</button
        >
        <span class='px-2'
          ><span class='sr-only'>Current font size:</span><span id='font-size'
            >16</span
          ></span
        >
        <button id='font-increase' class='' aria-label='Increase Font Size'
          >A+</button
        >
      </div>
    </div>
  </div>

  <!-- Nav items visible on mobile only -->
  <div class='container tablet:hidden'>
    <span class='block my-4 border-t border-t-green-emerald'></span>
    <ul
      class='flex flex-wrap justify-center items-center gap-x-4 gap-y-2'
      set:html={navItems}
    />
  </div>
</nav>

<script is:inline>
  const setDarkModeSwitchState = (boolean) => {
    const darkModeSwitch = document.getElementById('darkModeSwitch');
    const darkModeLabel = document.querySelector('label[for="darkModeSwitch"]');
    if (darkModeSwitch && darkModeLabel) {
      darkModeSwitch.checked = boolean;
      darkModeSwitch.setAttribute('aria-checked', boolean);
      darkModeLabel.textContent = boolean ? 'Dark Mode' : 'Light Mode';
    }
  };

  const isDarkMode = () => {
    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      return true;
    } else {
      return false;
    }
  };

  const initDarkMode = () => {
    if (isDarkMode()) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }

    setDarkModeSwitchState(isDarkMode());
  };

  document.addEventListener('astro:after-swap', () => {
    initDarkMode();
  });

  document.addEventListener('astro:page-load', () => {
    const toggleDarkMode = () => {
      const initialDarkModeState = isDarkMode();

      if (initialDarkModeState === true) {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
      } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
      }

      setDarkModeSwitchState(!initialDarkModeState);
    };

    const addChangeListenerToSwitch = () => {
      const darkModeSwitch = document.getElementById('darkModeSwitch');

      darkModeSwitch?.addEventListener('change', () => {
        toggleDarkMode();
      });
    };

    initDarkMode();
    addChangeListenerToSwitch();
  });
</script>

<script is:inline>
  const setFontSizeInStorage = (fontSize) => {
    localStorage.setItem('fontSize', fontSize);
  };

  const setFontSize = (newFontSize) => {
    const root = document.documentElement;
    const storedFontSize = localStorage.getItem('fontSize');
    const displayedFontSize = document.getElementById('font-size');

    if (storedFontSize) {
      root.style.fontSize = `${storedFontSize}px`;
    } else {
      root.style.fontSize = `${newFontSize}px`;
    }

    displayedFontSize.textContent = storedFontSize || newFontSize;
  };

  const decreaseFontSize = () => {
    const root = document.documentElement;
    const currentFontSize = parseFloat(getComputedStyle(root).fontSize);
    const newFontSize = currentFontSize - 1;
    setFontSizeInStorage(newFontSize);
    setFontSize(newFontSize);
  };

  const increaseFontSize = () => {
    const root = document.documentElement;
    const currentFontSize = parseFloat(getComputedStyle(root).fontSize);
    const newFontSize = currentFontSize + 1;
    setFontSizeInStorage(newFontSize);
    setFontSize(newFontSize);
  };

  const addEventListenerToFontButtons = () => {
    const decreaseFontButton = document.getElementById('font-decrease');
    const increaseFontButton = document.getElementById('font-increase');

    decreaseFontButton?.addEventListener('click', () => {
      decreaseFontSize();
    });

    increaseFontButton?.addEventListener('click', () => {
      increaseFontSize();
    });
  };

  document.addEventListener('astro:page-load', () => {
    setFontSize();
  });

  document.addEventListener('astro:after-swap', () => {
    setFontSize();
    addEventListenerToFontButtons();
  });

  setFontSize();
  addEventListenerToFontButtons();
</script>
