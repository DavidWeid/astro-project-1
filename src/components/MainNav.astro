---
interface NavigationLinks {
  [key: string]: string;
}

const obj: NavigationLinks = {
  home: '/',
  cookbook: '/cookbook/'
};

const pathname = new URL(Astro.request.url).pathname;
---

<nav
  class='z-10 py-4 bg-dark text-white bg-gradient-to-tr from-accent-dark/60 to-accent-dark/10 hover:from-accent-dark/80 transition-all desktop:sticky desktop:top-0'
>
  <div class='container flex justify-between items-center'>
    <span class='flex items-center'
      ><a
        href='/'
        class={pathname === '/'
          ? 'px-4 py-2 text-white hover:text-white dark:text-white dark:hover:text-white hover:cursor-default'
          : 'px-4 py-2 text-white hover:text-accent-light dark:text-white dark:hover:text-accent-light hover:scale-110 transition-all'}
        aria-label="David's Place Homepage">David's Place</a
      ></span
    >
    <div class='flex items-center gap-4'>
      <!-- Nav items visible on tablet+ -->
      <ul class='hidden tablet:flex items-center gap-4'>
        {
          Object.keys(obj).map((key) => (
            <li class='flex items-center'>
              <a
                href={obj[key]}
                class={
                  pathname === obj[key]
                    ? 'text-white/60 hover:text-white/60 dark:text-white/60 dark:hover:text-white/60 hover:cursor-default px-4 py-2 uppercase text-sm'
                    : 'px-4 py-2 text-white hover:text-accent-light hover:scale-110 transition-all uppercase text-sm'
                }
              >
                {key}
              </a>
            </li>
          ))
        }
      </ul>
      <fieldset class='flex flex-col gap-1'>
        <legend class='sr-only'>Select Dark Mode:</legend>
        <input
          type='checkbox'
          id='darkModeSwitch'
          class="transition-all before:transition-all duration-500 before:duration-700 relative appearance-none w-16 h-8 rounded-full bg-accent-light hover:cursor-pointer hover:brightness-125 before:content-[''] before:w-6 before:h-6 before:rounded-full before:bg-accent-dark before:absolute before:top-1/2 before:left-1 before:-translate-y-1/2 checked:bg-accent-dark checked:before:bg-accent-light checked:before:left-9"
        />
        <label
          for='darkModeSwitch'
          class='text-xs opacity-50 hover:cursor-pointer'>Dark Mode</label
        >
      </fieldset>
    </div>
  </div>

  <!-- Nav items visible on mobile only -->
  <div class='container tablet:hidden'>
    <span class='block my-4 border-t border-t-accent/75'></span>
    <ul class='flex justify-center items-center gap-4'>
      {
        Object.keys(obj).map((key) => (
          <li class='flex items-center'>
            <a
              href={obj[key]}
              class={
                pathname === obj[key]
                  ? 'text-white/60 hover:text-white/60 dark:text-white/60 dark:hover:text-white/60 hover:cursor-default px-4 py-2 uppercase text-sm'
                  : 'px-4 py-2 text-white hover:text-accent-light hover:scale-110 transition-all uppercase text-sm'
              }
            >
              {key}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script is:inline>
  const handleDarkModeSwitchState = (boolean) => {
    const darkModeSwitch = document.getElementById('darkModeSwitch');
    const darkModeLabel = document.querySelector('label[for="darkModeSwitch"]');
    if (darkModeSwitch) {
      darkModeSwitch.checked = boolean;
      darkModeSwitch.setAttribute('aria-checked', boolean);
      darkModeLabel.textContent = boolean ? 'Dark Mode' : 'Light Mode';
    }
  };

  const isDarkMode = () => {
    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      return true;
    } else {
      return false;
    }
  };

  const toggleDarkMode = () => {
    if (isDarkMode()) {
      document.documentElement.classList.remove('dark');
      localStorage.theme = 'light';
    } else {
      document.documentElement.classList.add('dark');
      localStorage.theme = 'dark';
    }

    handleDarkModeSwitchState(isDarkMode());
  };

  const initDarkMode = () => {
    if (isDarkMode()) {
      document.documentElement.classList.add('dark');
    }

    handleDarkModeSwitchState(isDarkMode());
  };

  const darkModeSwitchHandler = () => {
    darkModeSwitch?.addEventListener('change', () => {
      toggleDarkMode();
    });
  };

  initDarkMode();
  darkModeSwitchHandler();
</script>
